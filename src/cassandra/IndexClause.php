<?php
namespace cassandra;

/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

/**
 * @deprecated use a KeyRange with row_filter in get_range_slices instead
 */
class IndexClause extends TBase
{
    static public $isValidate = true;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'expressions',
            'isRequired' => true,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\cassandra\IndexExpression',
                ),
        ),
        2 => array(
            'var' => 'start_key',
            'isRequired' => true,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'count',
            'isRequired' => true,
            'type' => TType::I32,
        ),
    );

    /**
     * @var \cassandra\IndexExpression[]
     */
    public $expressions = null;
    /**
     * @var string
     */
    public $start_key = null;
    /**
     * @var int
     */
    public $count = 100;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            parent::__construct(self::$_TSPEC, $vals);
        }
    }

    public function getName()
    {
        return 'IndexClause';
    }


    public function read($input)
    {
        $tmp = $this->_read('IndexClause', self::$_TSPEC, $input);
        $this->_validateForRead();
        return $tmp;
    }


    public function write($output)
    {
        $this->_validateForWrite();
        return $this->_write('IndexClause', self::$_TSPEC, $output);
    }


    private function _validateForRead() {
        if ($this->expressions === null) {
            throw new TProtocolException('Required field IndexClause.expressions is unset!');
        }
        if ($this->start_key === null) {
            throw new TProtocolException('Required field IndexClause.start_key is unset!');
        }
        if ($this->count === null) {
            throw new TProtocolException('Required field IndexClause.count is unset!');
        }
    }

    private function _validateForWrite() {
        if ($this->expressions === null) {
            throw new TProtocolException('Required field IndexClause.expressions is unset!');
        }
        if ($this->start_key === null) {
            throw new TProtocolException('Required field IndexClause.start_key is unset!');
        }
        if ($this->count === null) {
            throw new TProtocolException('Required field IndexClause.count is unset!');
        }
    }
}
