<?php
namespace cassandra;

/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


/**
 * The ConsistencyLevel is an enum that controls both read and write
 * behavior based on the ReplicationFactor of the keyspace.  The
 * different consistency levels have different meanings, depending on
 * if you're doing a write or read operation.
 * 
 * If W + R > ReplicationFactor, where W is the number of nodes to
 * block for on write, and R the number to block for on reads, you
 * will have strongly consistent behavior; that is, readers will
 * always see the most recent write. Of these, the most interesting is
 * to do QUORUM reads and writes, which gives you consistency while
 * still allowing availability in the face of node failures up to half
 * of <ReplicationFactor>. Of course if latency is more important than
 * consistency then you can use lower values for either or both.
 * 
 * Some ConsistencyLevels (ONE, TWO, THREE) refer to a specific number
 * of replicas rather than a logical concept that adjusts
 * automatically with the replication factor.  Of these, only ONE is
 * commonly used; TWO and (even more rarely) THREE are only useful
 * when you care more about guaranteeing a certain level of
 * durability, than consistency.
 * 
 * Write consistency levels make the following guarantees before reporting success to the client:
 *   ANY          Ensure that the write has been written once somewhere, including possibly being hinted in a non-target node.
 *   ONE          Ensure that the write has been written to at least 1 node's commit log and memory table
 *   TWO          Ensure that the write has been written to at least 2 node's commit log and memory table
 *   THREE        Ensure that the write has been written to at least 3 node's commit log and memory table
 *   QUORUM       Ensure that the write has been written to <ReplicationFactor> / 2 + 1 nodes
 *   LOCAL_ONE    Ensure that the write has been written to 1 node within the local datacenter (requires NetworkTopologyStrategy)
 *   LOCAL_QUORUM Ensure that the write has been written to <ReplicationFactor> / 2 + 1 nodes, within the local datacenter (requires NetworkTopologyStrategy)
 *   EACH_QUORUM  Ensure that the write has been written to <ReplicationFactor> / 2 + 1 nodes in each datacenter (requires NetworkTopologyStrategy)
 *   ALL          Ensure that the write is written to <code>&lt;ReplicationFactor&gt;</code> nodes before responding to the client.
 * 
 * Read consistency levels make the following guarantees before returning successful results to the client:
 *   ANY          Not supported. You probably want ONE instead.
 *   ONE          Returns the record obtained from a single replica.
 *   TWO          Returns the record with the most recent timestamp once two replicas have replied.
 *   THREE        Returns the record with the most recent timestamp once three replicas have replied.
 *   QUORUM       Returns the record with the most recent timestamp once a majority of replicas have replied.
 *   LOCAL_ONE    Returns the record with the most recent timestamp once a single replica within the local datacenter have replied.
 *   LOCAL_QUORUM Returns the record with the most recent timestamp once a majority of replicas within the local datacenter have replied.
 *   EACH_QUORUM  Returns the record with the most recent timestamp once a majority of replicas within each datacenter have replied.
 *   ALL          Returns the record with the most recent timestamp once all replicas have replied (implies no replica may be down)..
 */
final class ConsistencyLevel {
  const ONE = 1;
  const QUORUM = 2;
  const LOCAL_QUORUM = 3;
  const EACH_QUORUM = 4;
  const ALL = 5;
  const ANY = 6;
  const TWO = 7;
  const THREE = 8;
  const SERIAL = 9;
  const LOCAL_SERIAL = 10;
  const LOCAL_ONE = 11;
  static public $__names = array(
    1 => 'ONE',
    2 => 'QUORUM',
    3 => 'LOCAL_QUORUM',
    4 => 'EACH_QUORUM',
    5 => 'ALL',
    6 => 'ANY',
    7 => 'TWO',
    8 => 'THREE',
    9 => 'SERIAL',
    10 => 'LOCAL_SERIAL',
    11 => 'LOCAL_ONE',
  );
}

final class IndexOperator {
  const EQ = 0;
  const GTE = 1;
  const GT = 2;
  const LTE = 3;
  const LT = 4;
  static public $__names = array(
    0 => 'EQ',
    1 => 'GTE',
    2 => 'GT',
    3 => 'LTE',
    4 => 'LT',
  );
}

final class IndexType {
  const KEYS = 0;
  const CUSTOM = 1;
  const COMPOSITES = 2;
  static public $__names = array(
    0 => 'KEYS',
    1 => 'CUSTOM',
    2 => 'COMPOSITES',
  );
}

/**
 * CQL query compression
 */
final class Compression {
  const GZIP = 1;
  const NONE = 2;
  static public $__names = array(
    1 => 'GZIP',
    2 => 'NONE',
  );
}

final class CqlResultType {
  const ROWS = 1;
  const VOID = 2;
  const INT = 3;
  static public $__names = array(
    1 => 'ROWS',
    2 => 'VOID',
    3 => 'INT',
  );
}

/**
 * Basic unit of data within a ColumnFamily.
 * @param name, the name by which this column is set and retrieved.  Maximum 64KB long.
 * @param value. The data associated with the name.  Maximum 2GB long, but in practice you should limit it to small numbers of MB (since Thrift must read the full value into memory to operate on it).
 * @param timestamp. The timestamp is used for conflict detection/resolution when two columns with same name need to be compared.
 * @param ttl. An optional, positive delay (in seconds) after which the column will be automatically deleted.
 */
class Column extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $name = null;
  /**
   * @var string
   */
  public $value = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var int
   */
  public $ttl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'ttl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Column';
  }

  public function read($input)
  {
    $tmp = $this->_read('Column', self::$_TSPEC, $input);
    $this->_validateForRead();
    return $tmp;
  }

  public function write($output) {
    $this->_validateForWrite();
    return $this->_write('Column', self::$_TSPEC, $output);
  }

  private function _validateForRead() {
    if ($this->name === null) {
      throw new TProtocolException('Required field Column.name is unset!');
    }
  }

  private function _validateForWrite() {
    if ($this->name === null) {
      throw new TProtocolException('Required field Column.name is unset!');
    }
  }

}

/**
 * A named list of columns.
 * @param name. see Column.name.
 * @param columns. A collection of standard Columns.  The columns within a super column are defined in an adhoc manner.
 *                 Columns within a super column do not have to have matching structures (similarly named child columns).
 */
class SuperColumn extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $name = null;
  /**
   * @var \cassandra\Column[]
   */
  public $columns = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'columns',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\cassandra\Column',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SuperColumn';
  }

  public function read($input)
  {
    $tmp = $this->_read('SuperColumn', self::$_TSPEC, $input);
    $this->_validateForRead();
    return $tmp;
  }

  public function write($output) {
    $this->_validateForWrite();
    return $this->_write('SuperColumn', self::$_TSPEC, $output);
  }

  private function _validateForRead() {
    if ($this->name === null) {
      throw new TProtocolException('Required field SuperColumn.name is unset!');
    }
    if ($this->columns === null) {
      throw new TProtocolException('Required field SuperColumn.columns is unset!');
    }
  }

  private function _validateForWrite() {
    if ($this->name === null) {
      throw new TProtocolException('Required field SuperColumn.name is unset!');
    }
    if ($this->columns === null) {
      throw new TProtocolException('Required field SuperColumn.columns is unset!');
    }
  }

}

class CounterColumn extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $name = null;
  /**
   * @var int
   */
  public $value = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'CounterColumn';
  }

  public function read($input)
  {
    $tmp = $this->_read('CounterColumn', self::$_TSPEC, $input);
    $this->_validateForRead();
    return $tmp;
  }

  public function write($output) {
    $this->_validateForWrite();
    return $this->_write('CounterColumn', self::$_TSPEC, $output);
  }

  private function _validateForRead() {
    if ($this->name === null) {
      throw new TProtocolException('Required field CounterColumn.name is unset!');
    }
    if ($this->value === null) {
      throw new TProtocolException('Required field CounterColumn.value is unset!');
    }
  }

  private function _validateForWrite() {
    if ($this->name === null) {
      throw new TProtocolException('Required field CounterColumn.name is unset!');
    }
    if ($this->value === null) {
      throw new TProtocolException('Required field CounterColumn.value is unset!');
    }
  }

}

class CounterSuperColumn extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $name = null;
  /**
   * @var \cassandra\CounterColumn[]
   */
  public $columns = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'columns',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\cassandra\CounterColumn',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'CounterSuperColumn';
  }

  public function read($input)
  {
    $tmp = $this->_read('CounterSuperColumn', self::$_TSPEC, $input);
    $this->_validateForRead();
    return $tmp;
  }

  public function write($output) {
    $this->_validateForWrite();
    return $this->_write('CounterSuperColumn', self::$_TSPEC, $output);
  }

  private function _validateForRead() {
    if ($this->name === null) {
      throw new TProtocolException('Required field CounterSuperColumn.name is unset!');
    }
    if ($this->columns === null) {
      throw new TProtocolException('Required field CounterSuperColumn.columns is unset!');
    }
  }

  private function _validateForWrite() {
    if ($this->name === null) {
      throw new TProtocolException('Required field CounterSuperColumn.name is unset!');
    }
    if ($this->columns === null) {
      throw new TProtocolException('Required field CounterSuperColumn.columns is unset!');
    }
  }

}

/**
 * Methods for fetching rows/records from Cassandra will return either a single instance of ColumnOrSuperColumn or a list
 * of ColumnOrSuperColumns (get_slice()). If you're looking up a SuperColumn (or list of SuperColumns) then the resulting
 * instances of ColumnOrSuperColumn will have the requested SuperColumn in the attribute super_column. For queries resulting
 * in Columns, those values will be in the attribute column. This change was made between 0.3 and 0.4 to standardize on
 * single query methods that may return either a SuperColumn or Column.
 * 
 * If the query was on a counter column family, you will either get a counter_column (instead of a column) or a
 * counter_super_column (instead of a super_column)
 * 
 * @param column. The Column returned by get() or get_slice().
 * @param super_column. The SuperColumn returned by get() or get_slice().
 * @param counter_column. The Counterolumn returned by get() or get_slice().
 * @param counter_super_column. The CounterSuperColumn returned by get() or get_slice().
 */
class ColumnOrSuperColumn extends TBase {
  static $_TSPEC;

  /**
   * @var \cassandra\Column
   */
  public $column = null;
  /**
   * @var \cassandra\SuperColumn
   */
  public $super_column = null;
  /**
   * @var \cassandra\CounterColumn
   */
  public $counter_column = null;
  /**
   * @var \cassandra\CounterSuperColumn
   */
  public $counter_super_column = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'column',
          'type' => TType::STRUCT,
          'class' => '\cassandra\Column',
          ),
        2 => array(
          'var' => 'super_column',
          'type' => TType::STRUCT,
          'class' => '\cassandra\SuperColumn',
          ),
        3 => array(
          'var' => 'counter_column',
          'type' => TType::STRUCT,
          'class' => '\cassandra\CounterColumn',
          ),
        4 => array(
          'var' => 'counter_super_column',
          'type' => TType::STRUCT,
          'class' => '\cassandra\CounterSuperColumn',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ColumnOrSuperColumn';
  }

  public function read($input)
  {
    return $this->_read('ColumnOrSuperColumn', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('ColumnOrSuperColumn', self::$_TSPEC, $output);
  }

}

/**
 * A specific column was requested that does not exist.
 */
class NotFoundException extends TException {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'NotFoundException';
  }

  public function read($input)
  {
    return $this->_read('NotFoundException', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('NotFoundException', self::$_TSPEC, $output);
  }

}

/**
 * Invalid request could mean keyspace or column family does not exist, required parameters are missing, or a parameter is malformed.
 * why contains an associated error message.
 */
class InvalidRequestException extends TException {
  static $_TSPEC;

  /**
   * @var string
   */
  public $why = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'why',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'InvalidRequestException';
  }

  public function read($input)
  {
    $tmp = $this->_read('InvalidRequestException', self::$_TSPEC, $input);
    $this->_validateForRead();
    return $tmp;
  }

  public function write($output) {
    $this->_validateForWrite();
    return $this->_write('InvalidRequestException', self::$_TSPEC, $output);
  }

  private function _validateForRead() {
    if ($this->why === null) {
      throw new TProtocolException('Required field InvalidRequestException.why is unset!');
    }
  }

  private function _validateForWrite() {
    if ($this->why === null) {
      throw new TProtocolException('Required field InvalidRequestException.why is unset!');
    }
  }

}

/**
 * Not all the replicas required could be created and/or read.
 */
class UnavailableException extends TException {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'UnavailableException';
  }

  public function read($input)
  {
    return $this->_read('UnavailableException', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('UnavailableException', self::$_TSPEC, $output);
  }

}

/**
 * RPC timeout was exceeded.  either a node failed mid-operation, or load was too high, or the requested op was too large.
 */
class TimedOutException extends TException {
  static $_TSPEC;

  /**
   * if a write operation was acknowledged by some replicas but not by enough to
   * satisfy the required ConsistencyLevel, the number of successful
   * replies will be given here. In case of atomic_batch_mutate method this field
   * will be set to -1 if the batch was written to the batchlog and to 0 if it wasn't.
   * 
   * @var int
   */
  public $acknowledged_by = null;
  /**
   * in case of atomic_batch_mutate method this field tells if the batch
   * was written to the batchlog.
   * 
   * @var bool
   */
  public $acknowledged_by_batchlog = null;
  /**
   * for the CAS method, this field tells if we timed out during the paxos
   * protocol, as opposed to during the commit of our update
   * 
   * @var bool
   */
  public $paxos_in_progress = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'acknowledged_by',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'acknowledged_by_batchlog',
          'type' => TType::BOOL,
          ),
        3 => array(
          'var' => 'paxos_in_progress',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TimedOutException';
  }

  public function read($input)
  {
    return $this->_read('TimedOutException', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TimedOutException', self::$_TSPEC, $output);
  }

}

/**
 * invalid authentication request (invalid keyspace, user does not exist, or credentials invalid)
 */
class AuthenticationException extends TException {
  static $_TSPEC;

  /**
   * @var string
   */
  public $why = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'why',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'AuthenticationException';
  }

  public function read($input)
  {
    $tmp = $this->_read('AuthenticationException', self::$_TSPEC, $input);
    $this->_validateForRead();
    return $tmp;
  }

  public function write($output) {
    $this->_validateForWrite();
    return $this->_write('AuthenticationException', self::$_TSPEC, $output);
  }

  private function _validateForRead() {
    if ($this->why === null) {
      throw new TProtocolException('Required field AuthenticationException.why is unset!');
    }
  }

  private function _validateForWrite() {
    if ($this->why === null) {
      throw new TProtocolException('Required field AuthenticationException.why is unset!');
    }
  }

}

/**
 * invalid authorization request (user does not have access to keyspace)
 */
class AuthorizationException extends TException {
  static $_TSPEC;

  /**
   * @var string
   */
  public $why = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'why',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'AuthorizationException';
  }

  public function read($input)
  {
    $tmp = $this->_read('AuthorizationException', self::$_TSPEC, $input);
    $this->_validateForRead();
    return $tmp;
  }

  public function write($output) {
    $this->_validateForWrite();
    return $this->_write('AuthorizationException', self::$_TSPEC, $output);
  }

  private function _validateForRead() {
    if ($this->why === null) {
      throw new TProtocolException('Required field AuthorizationException.why is unset!');
    }
  }

  private function _validateForWrite() {
    if ($this->why === null) {
      throw new TProtocolException('Required field AuthorizationException.why is unset!');
    }
  }

}

/**
 * NOTE: This up outdated exception left for backward compatibility reasons,
 * no actual schema agreement validation is done starting from Cassandra 1.2
 * 
 * schemas are not in agreement across all nodes
 */
class SchemaDisagreementException extends TException {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'SchemaDisagreementException';
  }

  public function read($input)
  {
    return $this->_read('SchemaDisagreementException', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SchemaDisagreementException', self::$_TSPEC, $output);
  }

}

/**
 * ColumnParent is used when selecting groups of columns from the same ColumnFamily. In directory structure terms, imagine
 * ColumnParent as ColumnPath + '/../'.
 * 
 * See also <a href="cassandra.html#Struct_ColumnPath">ColumnPath</a>
 */
class ColumnParent extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $column_family = null;
  /**
   * @var string
   */
  public $super_column = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        3 => array(
          'var' => 'column_family',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'super_column',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ColumnParent';
  }

  public function read($input)
  {
    $tmp = $this->_read('ColumnParent', self::$_TSPEC, $input);
    $this->_validateForRead();
    return $tmp;
  }

  public function write($output) {
    $this->_validateForWrite();
    return $this->_write('ColumnParent', self::$_TSPEC, $output);
  }

  private function _validateForRead() {
    if ($this->column_family === null) {
      throw new TProtocolException('Required field ColumnParent.column_family is unset!');
    }
  }

  private function _validateForWrite() {
    if ($this->column_family === null) {
      throw new TProtocolException('Required field ColumnParent.column_family is unset!');
    }
  }

}

/**
 * The ColumnPath is the path to a single column in Cassandra. It might make sense to think of ColumnPath and
 * ColumnParent in terms of a directory structure.
 * 
 * ColumnPath is used to looking up a single column.
 * 
 * @param column_family. The name of the CF of the column being looked up.
 * @param super_column. The super column name.
 * @param column. The column name.
 */
class ColumnPath extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $column_family = null;
  /**
   * @var string
   */
  public $super_column = null;
  /**
   * @var string
   */
  public $column = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        3 => array(
          'var' => 'column_family',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'super_column',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'column',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ColumnPath';
  }

  public function read($input)
  {
    $tmp = $this->_read('ColumnPath', self::$_TSPEC, $input);
    $this->_validateForRead();
    return $tmp;
  }

  public function write($output) {
    $this->_validateForWrite();
    return $this->_write('ColumnPath', self::$_TSPEC, $output);
  }

  private function _validateForRead() {
    if ($this->column_family === null) {
      throw new TProtocolException('Required field ColumnPath.column_family is unset!');
    }
  }

  private function _validateForWrite() {
    if ($this->column_family === null) {
      throw new TProtocolException('Required field ColumnPath.column_family is unset!');
    }
  }

}

/**
 * A slice range is a structure that stores basic range, ordering and limit information for a query that will return
 * multiple columns. It could be thought of as Cassandra's version of LIMIT and ORDER BY
 * 
 * @param start. The column name to start the slice with. This attribute is not required, though there is no default value,
 *               and can be safely set to '', i.e., an empty byte array, to start with the first column name. Otherwise, it
 *               must a valid value under the rules of the Comparator defined for the given ColumnFamily.
 * @param finish. The column name to stop the slice at. This attribute is not required, though there is no default value,
 *                and can be safely set to an empty byte array to not stop until 'count' results are seen. Otherwise, it
 *                must also be a valid value to the ColumnFamily Comparator.
 * @param reversed. Whether the results should be ordered in reversed order. Similar to ORDER BY blah DESC in SQL.
 * @param count. How many columns to return. Similar to LIMIT in SQL. May be arbitrarily large, but Thrift will
 *               materialize the whole result into memory before returning it to the client, so be aware that you may
 *               be better served by iterating through slices by passing the last value of one call in as the 'start'
 *               of the next instead of increasing 'count' arbitrarily large.
 */
class SliceRange extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $start = null;
  /**
   * @var string
   */
  public $finish = null;
  /**
   * @var bool
   */
  public $reversed = false;
  /**
   * @var int
   */
  public $count = 100;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'start',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'finish',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'reversed',
          'type' => TType::BOOL,
          ),
        4 => array(
          'var' => 'count',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SliceRange';
  }

  public function read($input)
  {
    $tmp = $this->_read('SliceRange', self::$_TSPEC, $input);
    $this->_validateForRead();
    return $tmp;
  }

  public function write($output) {
    $this->_validateForWrite();
    return $this->_write('SliceRange', self::$_TSPEC, $output);
  }

  private function _validateForRead() {
    if ($this->start === null) {
      throw new TProtocolException('Required field SliceRange.start is unset!');
    }
    if ($this->finish === null) {
      throw new TProtocolException('Required field SliceRange.finish is unset!');
    }
    if ($this->reversed === null) {
      throw new TProtocolException('Required field SliceRange.reversed is unset!');
    }
    if ($this->count === null) {
      throw new TProtocolException('Required field SliceRange.count is unset!');
    }
  }

  private function _validateForWrite() {
    if ($this->start === null) {
      throw new TProtocolException('Required field SliceRange.start is unset!');
    }
    if ($this->finish === null) {
      throw new TProtocolException('Required field SliceRange.finish is unset!');
    }
    if ($this->reversed === null) {
      throw new TProtocolException('Required field SliceRange.reversed is unset!');
    }
    if ($this->count === null) {
      throw new TProtocolException('Required field SliceRange.count is unset!');
    }
  }

}

/**
 * A SlicePredicate is similar to a mathematic predicate (see http://en.wikipedia.org/wiki/Predicate_(mathematical_logic)),
 * which is described as "a property that the elements of a set have in common."
 * 
 * SlicePredicate's in Cassandra are described with either a list of column_names or a SliceRange.  If column_names is
 * specified, slice_range is ignored.
 * 
 * @param column_name. A list of column names to retrieve. This can be used similar to Memcached's "multi-get" feature
 *                     to fetch N known column names. For instance, if you know you wish to fetch columns 'Joe', 'Jack',
 *                     and 'Jim' you can pass those column names as a list to fetch all three at once.
 * @param slice_range. A SliceRange describing how to range, order, and/or limit the slice.
 */
class SlicePredicate extends TBase {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $column_names = null;
  /**
   * @var \cassandra\SliceRange
   */
  public $slice_range = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'column_names',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'slice_range',
          'type' => TType::STRUCT,
          'class' => '\cassandra\SliceRange',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SlicePredicate';
  }

  public function read($input)
  {
    return $this->_read('SlicePredicate', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SlicePredicate', self::$_TSPEC, $output);
  }

}

class IndexExpression extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $column_name = null;
  /**
   * @var int
   */
  public $op = null;
  /**
   * @var string
   */
  public $value = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'column_name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'op',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'value',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'IndexExpression';
  }

  public function read($input)
  {
    $tmp = $this->_read('IndexExpression', self::$_TSPEC, $input);
    $this->_validateForRead();
    return $tmp;
  }

  public function write($output) {
    $this->_validateForWrite();
    return $this->_write('IndexExpression', self::$_TSPEC, $output);
  }

  private function _validateForRead() {
    if ($this->column_name === null) {
      throw new TProtocolException('Required field IndexExpression.column_name is unset!');
    }
    if ($this->op === null) {
      throw new TProtocolException('Required field IndexExpression.op is unset!');
    }
    if ($this->value === null) {
      throw new TProtocolException('Required field IndexExpression.value is unset!');
    }
  }

  private function _validateForWrite() {
    if ($this->column_name === null) {
      throw new TProtocolException('Required field IndexExpression.column_name is unset!');
    }
    if ($this->op === null) {
      throw new TProtocolException('Required field IndexExpression.op is unset!');
    }
    if ($this->value === null) {
      throw new TProtocolException('Required field IndexExpression.value is unset!');
    }
  }

}

/**
 * @deprecated use a KeyRange with row_filter in get_range_slices instead
 */
class IndexClause extends TBase {
  static $_TSPEC;

  /**
   * @var \cassandra\IndexExpression[]
   */
  public $expressions = null;
  /**
   * @var string
   */
  public $start_key = null;
  /**
   * @var int
   */
  public $count = 100;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'expressions',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\cassandra\IndexExpression',
            ),
          ),
        2 => array(
          'var' => 'start_key',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'count',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'IndexClause';
  }

  public function read($input)
  {
    $tmp = $this->_read('IndexClause', self::$_TSPEC, $input);
    $this->_validateForRead();
    return $tmp;
  }

  public function write($output) {
    $this->_validateForWrite();
    return $this->_write('IndexClause', self::$_TSPEC, $output);
  }

  private function _validateForRead() {
    if ($this->expressions === null) {
      throw new TProtocolException('Required field IndexClause.expressions is unset!');
    }
    if ($this->start_key === null) {
      throw new TProtocolException('Required field IndexClause.start_key is unset!');
    }
    if ($this->count === null) {
      throw new TProtocolException('Required field IndexClause.count is unset!');
    }
  }

  private function _validateForWrite() {
    if ($this->expressions === null) {
      throw new TProtocolException('Required field IndexClause.expressions is unset!');
    }
    if ($this->start_key === null) {
      throw new TProtocolException('Required field IndexClause.start_key is unset!');
    }
    if ($this->count === null) {
      throw new TProtocolException('Required field IndexClause.count is unset!');
    }
  }

}

/**
 * The semantics of start keys and tokens are slightly different.
 * Keys are start-inclusive; tokens are start-exclusive.  Token
 * ranges may also wrap -- that is, the end token may be less
 * than the start one.  Thus, a range from keyX to keyX is a
 * one-element range, but a range from tokenY to tokenY is the
 * full ring.
 */
class KeyRange extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $start_key = null;
  /**
   * @var string
   */
  public $end_key = null;
  /**
   * @var string
   */
  public $start_token = null;
  /**
   * @var string
   */
  public $end_token = null;
  /**
   * @var \cassandra\IndexExpression[]
   */
  public $row_filter = null;
  /**
   * @var int
   */
  public $count = 100;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'start_key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'end_key',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'start_token',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'end_token',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'row_filter',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\cassandra\IndexExpression',
            ),
          ),
        5 => array(
          'var' => 'count',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'KeyRange';
  }

  public function read($input)
  {
    $tmp = $this->_read('KeyRange', self::$_TSPEC, $input);
    $this->_validateForRead();
    return $tmp;
  }

  public function write($output) {
    $this->_validateForWrite();
    return $this->_write('KeyRange', self::$_TSPEC, $output);
  }

  private function _validateForRead() {
    if ($this->count === null) {
      throw new TProtocolException('Required field KeyRange.count is unset!');
    }
  }

  private function _validateForWrite() {
    if ($this->count === null) {
      throw new TProtocolException('Required field KeyRange.count is unset!');
    }
  }

}

/**
 * A KeySlice is key followed by the data it maps to. A collection of KeySlice is returned by the get_range_slice operation.
 * 
 * @param key. a row key
 * @param columns. List of data represented by the key. Typically, the list is pared down to only the columns specified by
 *                 a SlicePredicate.
 */
class KeySlice extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \cassandra\ColumnOrSuperColumn[]
   */
  public $columns = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'columns',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\cassandra\ColumnOrSuperColumn',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'KeySlice';
  }

  public function read($input)
  {
    $tmp = $this->_read('KeySlice', self::$_TSPEC, $input);
    $this->_validateForRead();
    return $tmp;
  }

  public function write($output) {
    $this->_validateForWrite();
    return $this->_write('KeySlice', self::$_TSPEC, $output);
  }

  private function _validateForRead() {
    if ($this->key === null) {
      throw new TProtocolException('Required field KeySlice.key is unset!');
    }
    if ($this->columns === null) {
      throw new TProtocolException('Required field KeySlice.columns is unset!');
    }
  }

  private function _validateForWrite() {
    if ($this->key === null) {
      throw new TProtocolException('Required field KeySlice.key is unset!');
    }
    if ($this->columns === null) {
      throw new TProtocolException('Required field KeySlice.columns is unset!');
    }
  }

}

class KeyCount extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $count = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'count',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'KeyCount';
  }

  public function read($input)
  {
    $tmp = $this->_read('KeyCount', self::$_TSPEC, $input);
    $this->_validateForRead();
    return $tmp;
  }

  public function write($output) {
    $this->_validateForWrite();
    return $this->_write('KeyCount', self::$_TSPEC, $output);
  }

  private function _validateForRead() {
    if ($this->key === null) {
      throw new TProtocolException('Required field KeyCount.key is unset!');
    }
    if ($this->count === null) {
      throw new TProtocolException('Required field KeyCount.count is unset!');
    }
  }

  private function _validateForWrite() {
    if ($this->key === null) {
      throw new TProtocolException('Required field KeyCount.key is unset!');
    }
    if ($this->count === null) {
      throw new TProtocolException('Required field KeyCount.count is unset!');
    }
  }

}

/**
 * Note that the timestamp is only optional in case of counter deletion.
 */
class Deletion extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var string
   */
  public $super_column = null;
  /**
   * @var \cassandra\SlicePredicate
   */
  public $predicate = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'super_column',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'predicate',
          'type' => TType::STRUCT,
          'class' => '\cassandra\SlicePredicate',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Deletion';
  }

  public function read($input)
  {
    return $this->_read('Deletion', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('Deletion', self::$_TSPEC, $output);
  }

}

/**
 * A Mutation is either an insert (represented by filling column_or_supercolumn) or a deletion (represented by filling the deletion attribute).
 * @param column_or_supercolumn. An insert to a column or supercolumn (possibly counter column or supercolumn)
 * @param deletion. A deletion of a column or supercolumn
 */
class Mutation extends TBase {
  static $_TSPEC;

  /**
   * @var \cassandra\ColumnOrSuperColumn
   */
  public $column_or_supercolumn = null;
  /**
   * @var \cassandra\Deletion
   */
  public $deletion = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'column_or_supercolumn',
          'type' => TType::STRUCT,
          'class' => '\cassandra\ColumnOrSuperColumn',
          ),
        2 => array(
          'var' => 'deletion',
          'type' => TType::STRUCT,
          'class' => '\cassandra\Deletion',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Mutation';
  }

  public function read($input)
  {
    return $this->_read('Mutation', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('Mutation', self::$_TSPEC, $output);
  }

}

class EndpointDetails extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $host = null;
  /**
   * @var string
   */
  public $datacenter = null;
  /**
   * @var string
   */
  public $rack = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'host',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'datacenter',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'rack',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'EndpointDetails';
  }

  public function read($input)
  {
    return $this->_read('EndpointDetails', self::$_TSPEC, $input);
  }

  public function write($output) {
    $this->_validateForWrite();
    return $this->_write('EndpointDetails', self::$_TSPEC, $output);
  }

  private function _validateForWrite() {
    if ($this->host === null) {
      throw new TProtocolException('Required field EndpointDetails.host is unset!');
    }
    if ($this->datacenter === null) {
      throw new TProtocolException('Required field EndpointDetails.datacenter is unset!');
    }
  }

}

class CASResult extends TBase {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \cassandra\Column[]
   */
  public $current_values = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'current_values',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\cassandra\Column',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'CASResult';
  }

  public function read($input)
  {
    $tmp = $this->_read('CASResult', self::$_TSPEC, $input);
    $this->_validateForRead();
    return $tmp;
  }

  public function write($output) {
    $this->_validateForWrite();
    return $this->_write('CASResult', self::$_TSPEC, $output);
  }

  private function _validateForRead() {
    if ($this->success === null) {
      throw new TProtocolException('Required field CASResult.success is unset!');
    }
  }

  private function _validateForWrite() {
    if ($this->success === null) {
      throw new TProtocolException('Required field CASResult.success is unset!');
    }
  }

}

/**
 * A TokenRange describes part of the Cassandra ring, it is a mapping from a range to
 * endpoints responsible for that range.
 * @param start_token The first token in the range
 * @param end_token The last token in the range
 * @param endpoints The endpoints responsible for the range (listed by their configured listen_address)
 * @param rpc_endpoints The endpoints responsible for the range (listed by their configured rpc_address)
 */
class TokenRange extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $start_token = null;
  /**
   * @var string
   */
  public $end_token = null;
  /**
   * @var string[]
   */
  public $endpoints = null;
  /**
   * @var string[]
   */
  public $rpc_endpoints = null;
  /**
   * @var \cassandra\EndpointDetails[]
   */
  public $endpoint_details = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'start_token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'end_token',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'endpoints',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        4 => array(
          'var' => 'rpc_endpoints',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        5 => array(
          'var' => 'endpoint_details',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\cassandra\EndpointDetails',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TokenRange';
  }

  public function read($input)
  {
    $tmp = $this->_read('TokenRange', self::$_TSPEC, $input);
    $this->_validateForRead();
    return $tmp;
  }

  public function write($output) {
    $this->_validateForWrite();
    return $this->_write('TokenRange', self::$_TSPEC, $output);
  }

  private function _validateForRead() {
    if ($this->start_token === null) {
      throw new TProtocolException('Required field TokenRange.start_token is unset!');
    }
    if ($this->end_token === null) {
      throw new TProtocolException('Required field TokenRange.end_token is unset!');
    }
    if ($this->endpoints === null) {
      throw new TProtocolException('Required field TokenRange.endpoints is unset!');
    }
  }

  private function _validateForWrite() {
    if ($this->start_token === null) {
      throw new TProtocolException('Required field TokenRange.start_token is unset!');
    }
    if ($this->end_token === null) {
      throw new TProtocolException('Required field TokenRange.end_token is unset!');
    }
    if ($this->endpoints === null) {
      throw new TProtocolException('Required field TokenRange.endpoints is unset!');
    }
  }

}

/**
 * Authentication requests can contain any data, dependent on the IAuthenticator used
 */
class AuthenticationRequest extends TBase {
  static $_TSPEC;

  /**
   * @var array
   */
  public $credentials = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'credentials',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'AuthenticationRequest';
  }

  public function read($input)
  {
    $tmp = $this->_read('AuthenticationRequest', self::$_TSPEC, $input);
    $this->_validateForRead();
    return $tmp;
  }

  public function write($output) {
    $this->_validateForWrite();
    return $this->_write('AuthenticationRequest', self::$_TSPEC, $output);
  }

  private function _validateForRead() {
    if ($this->credentials === null) {
      throw new TProtocolException('Required field AuthenticationRequest.credentials is unset!');
    }
  }

  private function _validateForWrite() {
    if ($this->credentials === null) {
      throw new TProtocolException('Required field AuthenticationRequest.credentials is unset!');
    }
  }

}

class ColumnDef extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $name = null;
  /**
   * @var string
   */
  public $validation_class = null;
  /**
   * @var int
   */
  public $index_type = null;
  /**
   * @var string
   */
  public $index_name = null;
  /**
   * @var array
   */
  public $index_options = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'validation_class',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'index_type',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'index_name',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'index_options',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ColumnDef';
  }

  public function read($input)
  {
    $tmp = $this->_read('ColumnDef', self::$_TSPEC, $input);
    $this->_validateForRead();
    return $tmp;
  }

  public function write($output) {
    $this->_validateForWrite();
    return $this->_write('ColumnDef', self::$_TSPEC, $output);
  }

  private function _validateForRead() {
    if ($this->name === null) {
      throw new TProtocolException('Required field ColumnDef.name is unset!');
    }
    if ($this->validation_class === null) {
      throw new TProtocolException('Required field ColumnDef.validation_class is unset!');
    }
  }

  private function _validateForWrite() {
    if ($this->name === null) {
      throw new TProtocolException('Required field ColumnDef.name is unset!');
    }
    if ($this->validation_class === null) {
      throw new TProtocolException('Required field ColumnDef.validation_class is unset!');
    }
  }

}

/**
 * Describes a trigger.
 * `options` should include at least 'class' param.
 * Other options are not supported yet.
 */
class TriggerDef extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $name = null;
  /**
   * @var array
   */
  public $options = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'options',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TriggerDef';
  }

  public function read($input)
  {
    $tmp = $this->_read('TriggerDef', self::$_TSPEC, $input);
    $this->_validateForRead();
    return $tmp;
  }

  public function write($output) {
    $this->_validateForWrite();
    return $this->_write('TriggerDef', self::$_TSPEC, $output);
  }

  private function _validateForRead() {
    if ($this->name === null) {
      throw new TProtocolException('Required field TriggerDef.name is unset!');
    }
    if ($this->options === null) {
      throw new TProtocolException('Required field TriggerDef.options is unset!');
    }
  }

  private function _validateForWrite() {
    if ($this->name === null) {
      throw new TProtocolException('Required field TriggerDef.name is unset!');
    }
    if ($this->options === null) {
      throw new TProtocolException('Required field TriggerDef.options is unset!');
    }
  }

}

class CfDef extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $keyspace = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var string
   */
  public $column_type = "Standard";
  /**
   * @var string
   */
  public $comparator_type = "BytesType";
  /**
   * @var string
   */
  public $subcomparator_type = null;
  /**
   * @var string
   */
  public $comment = null;
  /**
   * @var double
   */
  public $read_repair_chance = null;
  /**
   * @var \cassandra\ColumnDef[]
   */
  public $column_metadata = null;
  /**
   * @var int
   */
  public $gc_grace_seconds = null;
  /**
   * @var string
   */
  public $default_validation_class = null;
  /**
   * @var int
   */
  public $id = null;
  /**
   * @var int
   */
  public $min_compaction_threshold = null;
  /**
   * @var int
   */
  public $max_compaction_threshold = null;
  /**
   * @var string
   */
  public $key_validation_class = null;
  /**
   * @var string
   */
  public $key_alias = null;
  /**
   * @var string
   */
  public $compaction_strategy = null;
  /**
   * @var array
   */
  public $compaction_strategy_options = null;
  /**
   * @var array
   */
  public $compression_options = null;
  /**
   * @var double
   */
  public $bloom_filter_fp_chance = null;
  /**
   * @var string
   */
  public $caching = "keys_only";
  /**
   * @var double
   */
  public $dclocal_read_repair_chance = 0;
  /**
   * @var int
   */
  public $memtable_flush_period_in_ms = null;
  /**
   * @var int
   */
  public $default_time_to_live = null;
  /**
   * @var string
   */
  public $speculative_retry = "NONE";
  /**
   * @var \cassandra\TriggerDef[]
   */
  public $triggers = null;
  /**
   * @var string
   */
  public $cells_per_row_to_cache = "100";
  /**
   * @var int
   */
  public $min_index_interval = null;
  /**
   * @var int
   */
  public $max_index_interval = null;
  /**
   * @deprecated
   * 
   * @var double
   */
  public $row_cache_size = null;
  /**
   * @deprecated
   * 
   * @var double
   */
  public $key_cache_size = null;
  /**
   * @deprecated
   * 
   * @var int
   */
  public $row_cache_save_period_in_seconds = null;
  /**
   * @deprecated
   * 
   * @var int
   */
  public $key_cache_save_period_in_seconds = null;
  /**
   * @deprecated
   * 
   * @var int
   */
  public $memtable_flush_after_mins = null;
  /**
   * @deprecated
   * 
   * @var int
   */
  public $memtable_throughput_in_mb = null;
  /**
   * @deprecated
   * 
   * @var double
   */
  public $memtable_operations_in_millions = null;
  /**
   * @deprecated
   * 
   * @var bool
   */
  public $replicate_on_write = null;
  /**
   * @deprecated
   * 
   * @var double
   */
  public $merge_shards_chance = null;
  /**
   * @deprecated
   * 
   * @var string
   */
  public $row_cache_provider = null;
  /**
   * @deprecated
   * 
   * @var int
   */
  public $row_cache_keys_to_save = null;
  /**
   * @deprecated
   * 
   * @var bool
   */
  public $populate_io_cache_on_flush = null;
  /**
   * @deprecated
   * 
   * @var int
   */
  public $index_interval = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keyspace',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'column_type',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'comparator_type',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'subcomparator_type',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'comment',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'read_repair_chance',
          'type' => TType::DOUBLE,
          ),
        13 => array(
          'var' => 'column_metadata',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\cassandra\ColumnDef',
            ),
          ),
        14 => array(
          'var' => 'gc_grace_seconds',
          'type' => TType::I32,
          ),
        15 => array(
          'var' => 'default_validation_class',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        17 => array(
          'var' => 'min_compaction_threshold',
          'type' => TType::I32,
          ),
        18 => array(
          'var' => 'max_compaction_threshold',
          'type' => TType::I32,
          ),
        26 => array(
          'var' => 'key_validation_class',
          'type' => TType::STRING,
          ),
        28 => array(
          'var' => 'key_alias',
          'type' => TType::STRING,
          ),
        29 => array(
          'var' => 'compaction_strategy',
          'type' => TType::STRING,
          ),
        30 => array(
          'var' => 'compaction_strategy_options',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        32 => array(
          'var' => 'compression_options',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        33 => array(
          'var' => 'bloom_filter_fp_chance',
          'type' => TType::DOUBLE,
          ),
        34 => array(
          'var' => 'caching',
          'type' => TType::STRING,
          ),
        37 => array(
          'var' => 'dclocal_read_repair_chance',
          'type' => TType::DOUBLE,
          ),
        39 => array(
          'var' => 'memtable_flush_period_in_ms',
          'type' => TType::I32,
          ),
        40 => array(
          'var' => 'default_time_to_live',
          'type' => TType::I32,
          ),
        42 => array(
          'var' => 'speculative_retry',
          'type' => TType::STRING,
          ),
        43 => array(
          'var' => 'triggers',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\cassandra\TriggerDef',
            ),
          ),
        44 => array(
          'var' => 'cells_per_row_to_cache',
          'type' => TType::STRING,
          ),
        45 => array(
          'var' => 'min_index_interval',
          'type' => TType::I32,
          ),
        46 => array(
          'var' => 'max_index_interval',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'row_cache_size',
          'type' => TType::DOUBLE,
          ),
        11 => array(
          'var' => 'key_cache_size',
          'type' => TType::DOUBLE,
          ),
        19 => array(
          'var' => 'row_cache_save_period_in_seconds',
          'type' => TType::I32,
          ),
        20 => array(
          'var' => 'key_cache_save_period_in_seconds',
          'type' => TType::I32,
          ),
        21 => array(
          'var' => 'memtable_flush_after_mins',
          'type' => TType::I32,
          ),
        22 => array(
          'var' => 'memtable_throughput_in_mb',
          'type' => TType::I32,
          ),
        23 => array(
          'var' => 'memtable_operations_in_millions',
          'type' => TType::DOUBLE,
          ),
        24 => array(
          'var' => 'replicate_on_write',
          'type' => TType::BOOL,
          ),
        25 => array(
          'var' => 'merge_shards_chance',
          'type' => TType::DOUBLE,
          ),
        27 => array(
          'var' => 'row_cache_provider',
          'type' => TType::STRING,
          ),
        31 => array(
          'var' => 'row_cache_keys_to_save',
          'type' => TType::I32,
          ),
        38 => array(
          'var' => 'populate_io_cache_on_flush',
          'type' => TType::BOOL,
          ),
        41 => array(
          'var' => 'index_interval',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'CfDef';
  }

  public function read($input)
  {
    $tmp = $this->_read('CfDef', self::$_TSPEC, $input);
    $this->_validateForRead();
    return $tmp;
  }

  public function write($output) {
    $this->_validateForWrite();
    return $this->_write('CfDef', self::$_TSPEC, $output);
  }

  private function _validateForRead() {
    if ($this->keyspace === null) {
      throw new TProtocolException('Required field CfDef.keyspace is unset!');
    }
    if ($this->name === null) {
      throw new TProtocolException('Required field CfDef.name is unset!');
    }
  }

  private function _validateForWrite() {
    if ($this->keyspace === null) {
      throw new TProtocolException('Required field CfDef.keyspace is unset!');
    }
    if ($this->name === null) {
      throw new TProtocolException('Required field CfDef.name is unset!');
    }
  }

}

class KsDef extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $name = null;
  /**
   * @var string
   */
  public $strategy_class = null;
  /**
   * @var array
   */
  public $strategy_options = null;
  /**
   * @deprecated ignored
   * 
   * @var int
   */
  public $replication_factor = null;
  /**
   * @var \cassandra\CfDef[]
   */
  public $cf_defs = null;
  /**
   * @var bool
   */
  public $durable_writes = true;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'strategy_class',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'strategy_options',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        4 => array(
          'var' => 'replication_factor',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'cf_defs',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\cassandra\CfDef',
            ),
          ),
        6 => array(
          'var' => 'durable_writes',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'KsDef';
  }

  public function read($input)
  {
    $tmp = $this->_read('KsDef', self::$_TSPEC, $input);
    $this->_validateForRead();
    return $tmp;
  }

  public function write($output) {
    $this->_validateForWrite();
    return $this->_write('KsDef', self::$_TSPEC, $output);
  }

  private function _validateForRead() {
    if ($this->name === null) {
      throw new TProtocolException('Required field KsDef.name is unset!');
    }
    if ($this->strategy_class === null) {
      throw new TProtocolException('Required field KsDef.strategy_class is unset!');
    }
    if ($this->cf_defs === null) {
      throw new TProtocolException('Required field KsDef.cf_defs is unset!');
    }
  }

  private function _validateForWrite() {
    if ($this->name === null) {
      throw new TProtocolException('Required field KsDef.name is unset!');
    }
    if ($this->strategy_class === null) {
      throw new TProtocolException('Required field KsDef.strategy_class is unset!');
    }
    if ($this->cf_defs === null) {
      throw new TProtocolException('Required field KsDef.cf_defs is unset!');
    }
  }

}

/**
 * Row returned from a CQL query.
 * 
 * This struct is used for both CQL2 and CQL3 queries.  For CQL2, the partition key
 * is special-cased and is always returned.  For CQL3, it is not special cased;
 * it will be included in the columns list if it was included in the SELECT and
 * the key field is always null.
 */
class CqlRow extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \cassandra\Column[]
   */
  public $columns = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'columns',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\cassandra\Column',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'CqlRow';
  }

  public function read($input)
  {
    $tmp = $this->_read('CqlRow', self::$_TSPEC, $input);
    $this->_validateForRead();
    return $tmp;
  }

  public function write($output) {
    $this->_validateForWrite();
    return $this->_write('CqlRow', self::$_TSPEC, $output);
  }

  private function _validateForRead() {
    if ($this->key === null) {
      throw new TProtocolException('Required field CqlRow.key is unset!');
    }
    if ($this->columns === null) {
      throw new TProtocolException('Required field CqlRow.columns is unset!');
    }
  }

  private function _validateForWrite() {
    if ($this->key === null) {
      throw new TProtocolException('Required field CqlRow.key is unset!');
    }
    if ($this->columns === null) {
      throw new TProtocolException('Required field CqlRow.columns is unset!');
    }
  }

}

class CqlMetadata extends TBase {
  static $_TSPEC;

  /**
   * @var array
   */
  public $name_types = null;
  /**
   * @var array
   */
  public $value_types = null;
  /**
   * @var string
   */
  public $default_name_type = null;
  /**
   * @var string
   */
  public $default_value_type = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'name_types',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'value_types',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        3 => array(
          'var' => 'default_name_type',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'default_value_type',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'CqlMetadata';
  }

  public function read($input)
  {
    $tmp = $this->_read('CqlMetadata', self::$_TSPEC, $input);
    $this->_validateForRead();
    return $tmp;
  }

  public function write($output) {
    $this->_validateForWrite();
    return $this->_write('CqlMetadata', self::$_TSPEC, $output);
  }

  private function _validateForRead() {
    if ($this->name_types === null) {
      throw new TProtocolException('Required field CqlMetadata.name_types is unset!');
    }
    if ($this->value_types === null) {
      throw new TProtocolException('Required field CqlMetadata.value_types is unset!');
    }
    if ($this->default_name_type === null) {
      throw new TProtocolException('Required field CqlMetadata.default_name_type is unset!');
    }
    if ($this->default_value_type === null) {
      throw new TProtocolException('Required field CqlMetadata.default_value_type is unset!');
    }
  }

  private function _validateForWrite() {
    if ($this->name_types === null) {
      throw new TProtocolException('Required field CqlMetadata.name_types is unset!');
    }
    if ($this->value_types === null) {
      throw new TProtocolException('Required field CqlMetadata.value_types is unset!');
    }
    if ($this->default_name_type === null) {
      throw new TProtocolException('Required field CqlMetadata.default_name_type is unset!');
    }
    if ($this->default_value_type === null) {
      throw new TProtocolException('Required field CqlMetadata.default_value_type is unset!');
    }
  }

}

class CqlResult extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $type = null;
  /**
   * @var \cassandra\CqlRow[]
   */
  public $rows = null;
  /**
   * @var int
   */
  public $num = null;
  /**
   * @var \cassandra\CqlMetadata
   */
  public $schema = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'rows',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\cassandra\CqlRow',
            ),
          ),
        3 => array(
          'var' => 'num',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'schema',
          'type' => TType::STRUCT,
          'class' => '\cassandra\CqlMetadata',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'CqlResult';
  }

  public function read($input)
  {
    $tmp = $this->_read('CqlResult', self::$_TSPEC, $input);
    $this->_validateForRead();
    return $tmp;
  }

  public function write($output) {
    $this->_validateForWrite();
    return $this->_write('CqlResult', self::$_TSPEC, $output);
  }

  private function _validateForRead() {
    if ($this->type === null) {
      throw new TProtocolException('Required field CqlResult.type is unset!');
    }
  }

  private function _validateForWrite() {
    if ($this->type === null) {
      throw new TProtocolException('Required field CqlResult.type is unset!');
    }
  }

}

class CqlPreparedResult extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $itemId = null;
  /**
   * @var int
   */
  public $count = null;
  /**
   * @var string[]
   */
  public $variable_types = null;
  /**
   * @var string[]
   */
  public $variable_names = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'itemId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'count',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'variable_types',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        4 => array(
          'var' => 'variable_names',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'CqlPreparedResult';
  }

  public function read($input)
  {
    $tmp = $this->_read('CqlPreparedResult', self::$_TSPEC, $input);
    $this->_validateForRead();
    return $tmp;
  }

  public function write($output) {
    $this->_validateForWrite();
    return $this->_write('CqlPreparedResult', self::$_TSPEC, $output);
  }

  private function _validateForRead() {
    if ($this->itemId === null) {
      throw new TProtocolException('Required field CqlPreparedResult.itemId is unset!');
    }
    if ($this->count === null) {
      throw new TProtocolException('Required field CqlPreparedResult.count is unset!');
    }
  }

  private function _validateForWrite() {
    if ($this->itemId === null) {
      throw new TProtocolException('Required field CqlPreparedResult.itemId is unset!');
    }
    if ($this->count === null) {
      throw new TProtocolException('Required field CqlPreparedResult.count is unset!');
    }
  }

}

/**
 * Represents input splits used by hadoop ColumnFamilyRecordReaders
 */
class CfSplit extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $start_token = null;
  /**
   * @var string
   */
  public $end_token = null;
  /**
   * @var int
   */
  public $row_count = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'start_token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'end_token',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'row_count',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'CfSplit';
  }

  public function read($input)
  {
    $tmp = $this->_read('CfSplit', self::$_TSPEC, $input);
    $this->_validateForRead();
    return $tmp;
  }

  public function write($output) {
    $this->_validateForWrite();
    return $this->_write('CfSplit', self::$_TSPEC, $output);
  }

  private function _validateForRead() {
    if ($this->start_token === null) {
      throw new TProtocolException('Required field CfSplit.start_token is unset!');
    }
    if ($this->end_token === null) {
      throw new TProtocolException('Required field CfSplit.end_token is unset!');
    }
    if ($this->row_count === null) {
      throw new TProtocolException('Required field CfSplit.row_count is unset!');
    }
  }

  private function _validateForWrite() {
    if ($this->start_token === null) {
      throw new TProtocolException('Required field CfSplit.start_token is unset!');
    }
    if ($this->end_token === null) {
      throw new TProtocolException('Required field CfSplit.end_token is unset!');
    }
    if ($this->row_count === null) {
      throw new TProtocolException('Required field CfSplit.row_count is unset!');
    }
  }

}

/**
 * The ColumnSlice is used to select a set of columns from inside a row.
 * If start or finish are unspecified they will default to the start-of
 * end-of value.
 * @param start. The start of the ColumnSlice inclusive
 * @param finish. The end of the ColumnSlice inclusive
 */
class ColumnSlice extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $start = null;
  /**
   * @var string
   */
  public $finish = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'start',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'finish',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ColumnSlice';
  }

  public function read($input)
  {
    return $this->_read('ColumnSlice', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('ColumnSlice', self::$_TSPEC, $output);
  }

}

/**
 * Used to perform multiple slices on a single row key in one rpc operation
 * @param key. The row key to be multi sliced
 * @param column_parent. The column family (super columns are unsupported)
 * @param column_slices. 0 to many ColumnSlice objects each will be used to select columns
 * @param reversed. Direction of slice
 * @param count. Maximum number of columns
 * @param consistency_level. Level to perform the operation at
 */
class MultiSliceRequest extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \cassandra\ColumnParent
   */
  public $column_parent = null;
  /**
   * @var \cassandra\ColumnSlice[]
   */
  public $column_slices = null;
  /**
   * @var bool
   */
  public $reversed = false;
  /**
   * @var int
   */
  public $count = 1000;
  /**
   * @var int
   */
  public $consistency_level =   1;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'column_parent',
          'type' => TType::STRUCT,
          'class' => '\cassandra\ColumnParent',
          ),
        3 => array(
          'var' => 'column_slices',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\cassandra\ColumnSlice',
            ),
          ),
        4 => array(
          'var' => 'reversed',
          'type' => TType::BOOL,
          ),
        5 => array(
          'var' => 'count',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'consistency_level',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'MultiSliceRequest';
  }

  public function read($input)
  {
    return $this->_read('MultiSliceRequest', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('MultiSliceRequest', self::$_TSPEC, $output);
  }

}

final class Constant extends \Thrift\Type\TConstant {
  static protected $VERSION;

  static protected function init_VERSION() {
    return "20.1.0";
  }
}


