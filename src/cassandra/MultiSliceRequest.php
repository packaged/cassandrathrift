<?php
namespace cassandra;

/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

/**
 * Used to perform multiple slices on a single row key in one rpc operation
 * @param key. The row key to be multi sliced
 * @param column_parent. The column family (super columns are unsupported)
 * @param column_slices. 0 to many ColumnSlice objects each will be used to select columns
 * @param reversed. Direction of slice
 * @param count. Maximum number of columns
 * @param consistency_level. Level to perform the operation at
 */
class MultiSliceRequest extends TBase
{
    static public $isValidate = true;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'key',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'column_parent',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\cassandra\ColumnParent',
        ),
        3 => array(
            'var' => 'column_slices',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\cassandra\ColumnSlice',
                ),
        ),
        4 => array(
            'var' => 'reversed',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        5 => array(
            'var' => 'count',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        6 => array(
            'var' => 'consistency_level',
            'isRequired' => false,
            'type' => TType::I32,
            'class' => '\cassandra\ConsistencyLevel',
        ),
    );

    /**
     * @var string
     */
    public $key = null;
    /**
     * @var \cassandra\ColumnParent
     */
    public $column_parent = null;
    /**
     * @var \cassandra\ColumnSlice[]
     */
    public $column_slices = null;
    /**
     * @var bool
     */
    public $reversed = false;
    /**
     * @var int
     */
    public $count = 1000;
    /**
     * @var int
     */
    public $consistency_level =     1;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            parent::__construct(self::$_TSPEC, $vals);
        }
    }

    public function getName()
    {
        return 'MultiSliceRequest';
    }


    public function read($input)
    {
        return $this->_read('MultiSliceRequest', self::$_TSPEC, $input);
    }


    public function write($output)
    {
        return $this->_write('MultiSliceRequest', self::$_TSPEC, $output);
    }

}
