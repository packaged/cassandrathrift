<?php
namespace cassandra;

/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

/**
 * A TokenRange describes part of the Cassandra ring, it is a mapping from a range to
 * endpoints responsible for that range.
 * @param start_token The first token in the range
 * @param end_token The last token in the range
 * @param endpoints The endpoints responsible for the range (listed by their configured listen_address)
 * @param rpc_endpoints The endpoints responsible for the range (listed by their configured rpc_address)
 */
class TokenRange extends TBase
{
    static public $isValidate = true;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'start_token',
            'isRequired' => true,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'end_token',
            'isRequired' => true,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'endpoints',
            'isRequired' => true,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        4 => array(
            'var' => 'rpc_endpoints',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        5 => array(
            'var' => 'endpoint_details',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\cassandra\EndpointDetails',
                ),
        ),
    );

    /**
     * @var string
     */
    public $start_token = null;
    /**
     * @var string
     */
    public $end_token = null;
    /**
     * @var string[]
     */
    public $endpoints = null;
    /**
     * @var string[]
     */
    public $rpc_endpoints = null;
    /**
     * @var \cassandra\EndpointDetails[]
     */
    public $endpoint_details = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            parent::__construct(self::$_TSPEC, $vals);
        }
    }

    public function getName()
    {
        return 'TokenRange';
    }


    public function read($input)
    {
        $tmp = $this->_read('TokenRange', self::$_TSPEC, $input);
        $this->_validateForRead();
        return $tmp;
    }


    public function write($output)
    {
        $this->_validateForWrite();
        return $this->_write('TokenRange', self::$_TSPEC, $output);
    }


    private function _validateForRead() {
        if ($this->start_token === null) {
            throw new TProtocolException('Required field TokenRange.start_token is unset!');
        }
        if ($this->end_token === null) {
            throw new TProtocolException('Required field TokenRange.end_token is unset!');
        }
        if ($this->endpoints === null) {
            throw new TProtocolException('Required field TokenRange.endpoints is unset!');
        }
    }

    private function _validateForWrite() {
        if ($this->start_token === null) {
            throw new TProtocolException('Required field TokenRange.start_token is unset!');
        }
        if ($this->end_token === null) {
            throw new TProtocolException('Required field TokenRange.end_token is unset!');
        }
        if ($this->endpoints === null) {
            throw new TProtocolException('Required field TokenRange.endpoints is unset!');
        }
    }
}
