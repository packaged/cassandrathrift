<?php
namespace cassandra;

/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class CfDef extends TBase
{
    static public $isValidate = true;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'keyspace',
            'isRequired' => true,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'name',
            'isRequired' => true,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'column_type',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'comparator_type',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'subcomparator_type',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        8 => array(
            'var' => 'comment',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        12 => array(
            'var' => 'read_repair_chance',
            'isRequired' => false,
            'type' => TType::DOUBLE,
        ),
        13 => array(
            'var' => 'column_metadata',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\cassandra\ColumnDef',
                ),
        ),
        14 => array(
            'var' => 'gc_grace_seconds',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        15 => array(
            'var' => 'default_validation_class',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        16 => array(
            'var' => 'id',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        17 => array(
            'var' => 'min_compaction_threshold',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        18 => array(
            'var' => 'max_compaction_threshold',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        26 => array(
            'var' => 'key_validation_class',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        28 => array(
            'var' => 'key_alias',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        29 => array(
            'var' => 'compaction_strategy',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        30 => array(
            'var' => 'compaction_strategy_options',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRING,
                ),
        ),
        32 => array(
            'var' => 'compression_options',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRING,
                ),
        ),
        33 => array(
            'var' => 'bloom_filter_fp_chance',
            'isRequired' => false,
            'type' => TType::DOUBLE,
        ),
        34 => array(
            'var' => 'caching',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        37 => array(
            'var' => 'dclocal_read_repair_chance',
            'isRequired' => false,
            'type' => TType::DOUBLE,
        ),
        39 => array(
            'var' => 'memtable_flush_period_in_ms',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        40 => array(
            'var' => 'default_time_to_live',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        42 => array(
            'var' => 'speculative_retry',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        43 => array(
            'var' => 'triggers',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\cassandra\TriggerDef',
                ),
        ),
        44 => array(
            'var' => 'cells_per_row_to_cache',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        45 => array(
            'var' => 'min_index_interval',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        46 => array(
            'var' => 'max_index_interval',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        9 => array(
            'var' => 'row_cache_size',
            'isRequired' => false,
            'type' => TType::DOUBLE,
        ),
        11 => array(
            'var' => 'key_cache_size',
            'isRequired' => false,
            'type' => TType::DOUBLE,
        ),
        19 => array(
            'var' => 'row_cache_save_period_in_seconds',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        20 => array(
            'var' => 'key_cache_save_period_in_seconds',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        21 => array(
            'var' => 'memtable_flush_after_mins',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        22 => array(
            'var' => 'memtable_throughput_in_mb',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        23 => array(
            'var' => 'memtable_operations_in_millions',
            'isRequired' => false,
            'type' => TType::DOUBLE,
        ),
        24 => array(
            'var' => 'replicate_on_write',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        25 => array(
            'var' => 'merge_shards_chance',
            'isRequired' => false,
            'type' => TType::DOUBLE,
        ),
        27 => array(
            'var' => 'row_cache_provider',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        31 => array(
            'var' => 'row_cache_keys_to_save',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        38 => array(
            'var' => 'populate_io_cache_on_flush',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        41 => array(
            'var' => 'index_interval',
            'isRequired' => false,
            'type' => TType::I32,
        ),
    );

    /**
     * @var string
     */
    public $keyspace = null;
    /**
     * @var string
     */
    public $name = null;
    /**
     * @var string
     */
    public $column_type = "Standard";
    /**
     * @var string
     */
    public $comparator_type = "BytesType";
    /**
     * @var string
     */
    public $subcomparator_type = null;
    /**
     * @var string
     */
    public $comment = null;
    /**
     * @var double
     */
    public $read_repair_chance = null;
    /**
     * @var \cassandra\ColumnDef[]
     */
    public $column_metadata = null;
    /**
     * @var int
     */
    public $gc_grace_seconds = null;
    /**
     * @var string
     */
    public $default_validation_class = null;
    /**
     * @var int
     */
    public $id = null;
    /**
     * @var int
     */
    public $min_compaction_threshold = null;
    /**
     * @var int
     */
    public $max_compaction_threshold = null;
    /**
     * @var string
     */
    public $key_validation_class = null;
    /**
     * @var string
     */
    public $key_alias = null;
    /**
     * @var string
     */
    public $compaction_strategy = null;
    /**
     * @var array
     */
    public $compaction_strategy_options = null;
    /**
     * @var array
     */
    public $compression_options = null;
    /**
     * @var double
     */
    public $bloom_filter_fp_chance = null;
    /**
     * @var string
     */
    public $caching = "keys_only";
    /**
     * @var double
     */
    public $dclocal_read_repair_chance = 0;
    /**
     * @var int
     */
    public $memtable_flush_period_in_ms = null;
    /**
     * @var int
     */
    public $default_time_to_live = null;
    /**
     * @var string
     */
    public $speculative_retry = "NONE";
    /**
     * @var \cassandra\TriggerDef[]
     */
    public $triggers = null;
    /**
     * @var string
     */
    public $cells_per_row_to_cache = "100";
    /**
     * @var int
     */
    public $min_index_interval = null;
    /**
     * @var int
     */
    public $max_index_interval = null;
    /**
     * @deprecated
     * 
     * @var double
     */
    public $row_cache_size = null;
    /**
     * @deprecated
     * 
     * @var double
     */
    public $key_cache_size = null;
    /**
     * @deprecated
     * 
     * @var int
     */
    public $row_cache_save_period_in_seconds = null;
    /**
     * @deprecated
     * 
     * @var int
     */
    public $key_cache_save_period_in_seconds = null;
    /**
     * @deprecated
     * 
     * @var int
     */
    public $memtable_flush_after_mins = null;
    /**
     * @deprecated
     * 
     * @var int
     */
    public $memtable_throughput_in_mb = null;
    /**
     * @deprecated
     * 
     * @var double
     */
    public $memtable_operations_in_millions = null;
    /**
     * @deprecated
     * 
     * @var bool
     */
    public $replicate_on_write = null;
    /**
     * @deprecated
     * 
     * @var double
     */
    public $merge_shards_chance = null;
    /**
     * @deprecated
     * 
     * @var string
     */
    public $row_cache_provider = null;
    /**
     * @deprecated
     * 
     * @var int
     */
    public $row_cache_keys_to_save = null;
    /**
     * @deprecated
     * 
     * @var bool
     */
    public $populate_io_cache_on_flush = null;
    /**
     * @deprecated
     * 
     * @var int
     */
    public $index_interval = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            parent::__construct(self::$_TSPEC, $vals);
        }
    }

    public function getName()
    {
        return 'CfDef';
    }


    public function read($input)
    {
        $tmp = $this->_read('CfDef', self::$_TSPEC, $input);
        $this->_validateForRead();
        return $tmp;
    }


    public function write($output)
    {
        $this->_validateForWrite();
        return $this->_write('CfDef', self::$_TSPEC, $output);
    }


    private function _validateForRead() {
        if ($this->keyspace === null) {
            throw new TProtocolException('Required field CfDef.keyspace is unset!');
        }
        if ($this->name === null) {
            throw new TProtocolException('Required field CfDef.name is unset!');
        }
    }

    private function _validateForWrite() {
        if ($this->keyspace === null) {
            throw new TProtocolException('Required field CfDef.keyspace is unset!');
        }
        if ($this->name === null) {
            throw new TProtocolException('Required field CfDef.name is unset!');
        }
    }
}
