<?php
namespace cassandra;

/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

/**
 * The ColumnPath is the path to a single column in Cassandra. It might make sense to think of ColumnPath and
 * ColumnParent in terms of a directory structure.
 * 
 * ColumnPath is used to looking up a single column.
 * 
 * @param column_family. The name of the CF of the column being looked up.
 * @param super_column. The super column name.
 * @param column. The column name.
 */
class ColumnPath extends TBase
{
    static public $isValidate = true;

    static public $_TSPEC = array(
        3 => array(
            'var' => 'column_family',
            'isRequired' => true,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'super_column',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'column',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var string
     */
    public $column_family = null;
    /**
     * @var string
     */
    public $super_column = null;
    /**
     * @var string
     */
    public $column = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            parent::__construct(self::$_TSPEC, $vals);
        }
    }

    public function getName()
    {
        return 'ColumnPath';
    }


    public function read($input)
    {
        $tmp = $this->_read('ColumnPath', self::$_TSPEC, $input);
        $this->_validateForRead();
        return $tmp;
    }


    public function write($output)
    {
        $this->_validateForWrite();
        return $this->_write('ColumnPath', self::$_TSPEC, $output);
    }


    private function _validateForRead() {
        if ($this->column_family === null) {
            throw new TProtocolException('Required field ColumnPath.column_family is unset!');
        }
    }

    private function _validateForWrite() {
        if ($this->column_family === null) {
            throw new TProtocolException('Required field ColumnPath.column_family is unset!');
        }
    }
}
